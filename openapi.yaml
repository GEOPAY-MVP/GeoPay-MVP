openapi: 3.0.3
info:
  title: GeoPay API
  description: RESTful API contract for the GeoPay MVP backend.
  version: 2.0.0
  contact:
    name: GeoPay
servers:
  - url: /api/v1
tags:
  - name: User Authentication & Onboarding
  - name: Device Management
  - name: Wallet Management
  - name: PAYMENT & TRANSFER SERVICES
  - name: PROVIDERS
  - name: VIRTUAL CARD MANAGEMENT
  - name: Notifications
  - name: Security
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  # ==========================================
  # USER AUTHENTICATION & ONBOARDING
  # ==========================================
  /users/register-phone:
    post:
      summary: Register user (Step 1 - phone number only)
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  pattern: '^[0-9]{10,15}$'
                  description: User's phone number in international format (e.g., 923001234567)
              required:
                - phone
      responses:
        '201':
          description: Registration started
          content:
            application/json:
              example:
                message: "Registration started. Please provide email and name."
                session_token: "temp_session_token_for_step_2"
        '400':
          description: Invalid phone number format
        '409':
          description: Phone number already registered

  /users/register-email:
    post:
      summary: Register user (Step 2 - email + name)
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                  minLength: 2
                session_token:
                  type: string
                  description: Temporary session token from Step 1
              required:
                - email
                - name
                - session_token
      responses:
        '201':
          description: Email and name registered
          content:
            application/json:
              example:
                message: "Email and name registered. Please set transaction PIN."
                session_token: "temp_session_token_for_step_3"
        '400':
          description: Invalid email, name, or session token
        '401':
          description: Invalid session token
        '409':
          description: Email already registered

  /users/register-pin:
    post:
      summary: Register user (Step 3 - set transaction PIN)
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pin:
                  type: string
                  pattern: '^[0-9]{4,6}$'
                  description: 4â€“6 digit numeric PIN for secure transactions
                session_token:
                  type: string
                  description: Temporary session token from Step 2
              required:
                - pin
                - session_token
      responses:
        '201':
          description: PIN created successfully
          content:
            application/json:
              example:
                message: "PIN created successfully. Please upload CNIC."
                session_token: "temp_session_token_for_step_4"
        '400':
          description: Invalid PIN or session token
        '401':
          description: Session token expired or invalid

  /users/register-cnic:
    post:
      summary: Upload CNIC (Step 4 - OCR extraction)
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                session_token:
                  type: string
                  description: Temporary token from Step 3
                cnic_image:
                  type: string
                  format: binary
              required:
                - session_token
                - cnic_image
      responses:
        '201':
          description: CNIC captured and OCR performed
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    format: uuid
                  full_name:
                    type: string
                  cnic:
                    type: string
                  date_of_birth:
                    type: string
                    format: date
                  address:
                    type: string
                  kyc_status:
                    type: string
                    enum:
                      - pending
                  message:
                    type: string
              example:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                full_name: "Ahmed Khan"
                cnic: "12345-6789012-3"
                date_of_birth: "1990-01-15"
                address: "House 123, Street 45, Islamabad"
                kyc_status: "pending"
                message: "CNIC registered. Please complete biometric verification."
        '400':
          description: Invalid CNIC image or OCR failed
        '401':
          description: Invalid session token
        '409':
          description: CNIC already registered

  /users/verify-biometric:
    post:
      summary: Complete biometric verification (Step 5)
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                biometric_token:
                  type: string
                  description: Token from NADRA biometric verification service
              required:
                - user_id
                - biometric_token
      responses:
        '200':
          description: Biometric verified, KYC completed
          content:
            application/json:
              example:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                kyc_status: "verified"
                message: "KYC verification completed successfully."
        '400':
          description: Invalid biometric token
        '404':
          description: User not found

  /users/login:
    post:
      summary: Login with email/phone + password/PIN
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_or_phone:
                  type: string
                password_or_pin:
                  type: string
                device_fingerprint:
                  type: string
                  description: Unique device identifier
              required:
                - email_or_phone
                - password_or_pin
                - device_fingerprint
      responses:
        '200':
          description: Login successful, device verification required
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    format: uuid
                  temp_token:
                    type: string
                    description: Temporary token for OTP verification
                  requires_otp:
                    type: boolean
                  message:
                    type: string
              example:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                temp_token: "temp_jwt_token"
                requires_otp: true
                message: "OTP sent to registered email/phone for device verification."
        '401':
          description: Invalid credentials

  /users/login-biometric:
    post:
      summary: Login with biometric authentication
      tags:
        - User Authentication & Onboarding
      security: []
      description: |
        Biometric login flow:
        1. User provides email/phone and device fingerprint
        2. Backend generates a challenge token
        3. User authenticates locally on device using biometric
        4. Device signs the challenge with stored biometric key
        5. Backend verifies the signature against stored public key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_or_phone:
                  type: string
                device_fingerprint:
                  type: string
                challenge_response:
                  type: string
                  description: Signed challenge token from device biometric authentication
              required:
                - email_or_phone
                - device_fingerprint
                - challenge_response
      responses:
        '200':
          description: Biometric login successful
          content:
            application/json:
              example:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                token: "jwt_token"
                last_login_at: "2025-10-01T10:30:00Z"
        '401':
          description: Invalid biometric authentication
        '404':
          description: Device not registered for biometric login

  /users/send-otp:
    post:
      summary: Send OTP for login, device verification, or 2FA
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                channel:
                  type: string
                  enum:
                    - email
                    - sms
                purpose:
                  type: string
                  enum:
                    - device_verification
                    - login
                    - transaction
                    - password_reset
              required:
                - user_id
                - channel
                - purpose
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              example:
                message: "OTP sent successfully to registered email/phone."
                expires_in: 300
        '400':
          description: Invalid channel or purpose
        '404':
          description: User not found

  /users/verify-otp:
    post:
      summary: Verify OTP and complete login/device registration
      tags:
        - User Authentication & Onboarding
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                otp:
                  type: string
                temp_token:
                  type: string
                  description: Temporary token from login API
              required:
                - user_id
                - otp
                - temp_token
      responses:
        '200':
          description: OTP verified, full access granted
          content:
            application/json:
              example:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                token: "full_jwt_token"
                last_login_at: "2025-10-01T10:30:00Z"
        '400':
          description: Invalid or expired OTP
        '401':
          description: Invalid temp token

  /users/me:
    get:
      summary: Get current user profile
      tags:
        - User Authentication & Onboarding
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              example:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                full_name: "Ahmed Khan"
                email: "ahmed@example.com"
                phone_number: "+923001234567"
                cnic: "12345-6789012-3"
                date_of_birth: "1990-01-15"
                address: "House 123, Street 45, Islamabad"
                kyc_status: "verified"
                registered_at: "2025-09-15T08:00:00Z"
                last_login_at: "2025-10-01T10:30:00Z"
                status: "active"
        '401':
          description: Unauthorized

  /users/2fa/setup:
    post:
      summary: Enable/disable 2FA
      tags:
        - User Authentication & Onboarding
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enable:
                  type: boolean
                method:
                  type: string
                  enum:
                    - sms
                    - email
                    - authenticator
              required:
                - enable
      responses:
        '200':
          description: 2FA status updated
          content:
            application/json:
              example:
                message: "2FA enabled successfully."
                qr_code: "data:image/png;base64,..."
        '400':
          description: Invalid request

  # ==========================================
  # DEVICE MANAGEMENT
  # ==========================================

  /devices/register:
    post:
      summary: Register device to user (one device per user at a time)
      tags:
        - Device Management
      security:
        - bearerAuth: []
      description: |
        Device registration flow:
        1. User must be logged in (JWT required)
        2. OTP is sent to user's registered email/phone
        3. User provides OTP to complete device registration
        4. If another device is already registered, it will be deactivated
        5. Only one device can be active per user at a time
        6. Device is automatically unregistered on logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device_fingerprint:
                  type: string
                  description: Unique device identifier
                device_name:
                  type: string
                  description: User-friendly device name
                os_type:
                  type: string
                  enum:
                    - iOS
                    - Android
                    - Web
                otp:
                  type: string
                biometric_public_key:
                  type: string
                  description: Public key for biometric authentication (optional)
              required:
                - device_fingerprint
                - os_type
                - otp
      responses:
        '201':
          description: Device registered successfully
          content:
            application/json:
              example:
                device_id: "device-uuid"
                status: "active"
                message: "Device registered. Previous devices have been deactivated."
        '400':
          description: Invalid OTP
        '409':
          description: Device already registered to another user

  /devices/unregister:
    post:
      summary: Unregister current device (logout)
      tags:
        - Device Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device_fingerprint:
                  type: string
              required:
                - device_fingerprint
      responses:
        '200':
          description: Device unregistered
          content:
            application/json:
              example:
                message: "Device unregistered successfully."
        '404':
          description: Device not found

  /devices:
    get:
      summary: Get all devices for current user
      tags:
        - Device Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of devices
          content:
            application/json:
              example:
                devices:
                  - device_id: "device-uuid"
                    device_name: "iPhone 13"
                    device_fingerprint: "abc123xyz"
                    os_type: "iOS"
                    status: "active"
                    registered_at: "2025-10-01T10:00:00Z"
                    last_active: "2025-10-01T10:30:00Z"

  # ==========================================
  # WALLET MANAGEMENT
  # ==========================================

  /wallets:
    get:
      summary: Get wallet details for authenticated user
      tags:
        - Wallet Management
      security:
        - bearerAuth: []
      description: Returns wallet for the authenticated user only (verified via JWT)
      responses:
        '200':
          description: Wallet details
          content:
            application/json:
              example:
                wallet_id: "wallet-uuid"
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                available_balance: 5000.00
                pending_balance: 200.00
                currency_code: "PKR"
                status: "active"
                created_at: "2025-09-15T08:00:00Z"
                updated_at: "2025-10-01T10:30:00Z"
        '404':
          description: Wallet not found
        '401':
          description: Unauthorized

  /wallets/transactions:
    get:
      summary: Get transaction history for authenticated user's wallet
      tags:
        - Wallet Management
      security:
        - bearerAuth: []
      description: Returns transactions for the authenticated user's wallet only (verified via JWT)
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by receiver name, transaction ID, or description
        - in: query
          name: start_date
          schema:
            type: string
            format: date
        - in: query
          name: end_date
          schema:
            type: string
            format: date
        - in: query
          name: type
          schema:
            type: string
            enum:
              - p2p
              - qr
              - bill
              - raast
              - card
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - completed
              - failed
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Transaction list
          content:
            application/json:
              example:
                transactions:
                  - transaction_id: "txn-uuid"
                    transaction_type: "p2p"
                    amount: 1000.00
                    receiver_name: "Ali Ahmed"
                    description: "Payment for lunch"
                    status: "completed"
                    created_at: "2025-10-01T09:00:00Z"
                    completed_at: "2025-10-01T09:00:15Z"
                total: 45
                page: 1
                pages: 3
        '401':
          description: Unauthorized

  # ==========================================
  # PAYMENT & TRANSFER SERVICES
  # ==========================================

  /transactions/p2p:
    post:
      summary: Initiate P2P transfer
      tags:
        - PAYMENT & TRANSFER SERVICES
      security:
        - bearerAuth: []
      description: Transfer from authenticated user's wallet to another GeoPay user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver_phone_or_cnic:
                  type: string
                  description: Receiver's phone number or CNIC
                amount:
                  type: number
                  format: double
                  minimum: 1
                description:
                  type: string
                  maxLength: 200
                otp:
                  type: string
                  description: OTP for transaction verification (if 2FA enabled)
              required:
                - receiver_phone_or_cnic
                - amount
      responses:
        '201':
          description: Transfer successful
          content:
            application/json:
              example:
                transaction_id: "txn-uuid"
                status: "completed"
                amount: 1000.00
                receiver_name: "Ali Ahmed"
                completed_at: "2025-10-01T10:35:00Z"
        '400':
          description: Insufficient balance or invalid amount
        '404':
          description: Receiver not found
        '401':
          description: Unauthorized

  /transactions/qr:
    post:
      summary: QR code payment
      tags:
        - PAYMENT & TRANSFER SERVICES
      security:
        - bearerAuth: []
      description: Pay via scanned QR code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                qr_data:
                  type: string
                  description: Encrypted QR code data
                amount:
                  type: number
                  format: double
                  minimum: 1
                otp:
                  type: string
                  description: OTP for transaction verification (if 2FA enabled)
              required:
                - qr_data
                - amount
      responses:
        '201':
          description: QR payment successful
          content:
            application/json:
              example:
                transaction_id: "txn-uuid"
                status: "completed"
                merchant_name: "ABC Store"
                amount: 500.00
                receipt:
                  transaction_id: "txn-uuid"
                  timestamp: "2025-10-01T10:35:00Z"
                  merchant: "ABC Store"
                  amount: 500.00
        '400':
          description: Invalid QR code or insufficient balance
        '401':
          description: Unauthorized

  /transactions/bill:
    post:
      summary: Bill payment
      tags:
        - PAYMENT & TRANSFER SERVICES
      security:
        - bearerAuth: []
      description: Pay utility bills or mobile recharge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider_id:
                  type: string
                  format: uuid
                  description: ID from /providers endpoint
                consumer_number:
                  type: string
                  description: Consumer number or reference number
                amount:
                  type: number
                  format: double
                  minimum: 1
                otp:
                  type: string
                  description: OTP for transaction verification (if 2FA enabled)
              required:
                - provider_id
                - consumer_number
                - amount
      responses:
        '201':
          description: Bill payment successful
          content:
            application/json:
              example:
                transaction_id: "txn-uuid"
                status: "completed"
                provider_name: "K-Electric"
                consumer_number: "12345678901"
                amount: 2500.00
                completed_at: "2025-10-01T10:35:00Z"
        '400':
          description: Invalid provider or insufficient balance
        '404':
          description: Provider not found
        '401':
          description: Unauthorized

  /transactions/raast:
    post:
      summary: Raast transfer
      tags:
        - PAYMENT & TRANSFER SERVICES
      security:
        - bearerAuth: []
      description: Transfer to any bank account via RAAST
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver_iban:
                  type: string
                  pattern: '^PK[0-9]{2}[A-Z]{4}[0-9]{16}$'
                  description: Pakistani IBAN format
                amount:
                  type: number
                  format: double
                  minimum: 1
                description:
                  type: string
                  maxLength: 200
                otp:
                  type: string
                  description: OTP for transaction verification (if 2FA enabled)
              required:
                - receiver_iban
                - amount
      responses:
        '201':
          description: Raast transfer successful
          content:
            application/json:
              example:
                transaction_id: "txn-uuid"
                status: "completed"
                receiver_iban: "PK36SCBL0000001123456702"
                receiver_bank: "Standard Chartered Bank"
                amount: 5000.00
                completed_at: "2025-10-01T10:35:00Z"
        '400':
          description: Invalid IBAN or insufficient balance
        '401':
          description: Unauthorized

  /transactions/link:
    post:
      summary: Generate payment link
      tags:
        - PAYMENT & TRANSFER SERVICES
      security:
        - bearerAuth: []
      description: Create a shareable payment link for receiving money
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: double
                  minimum: 1
                mode:
                  type: string
                  enum:
                    - p2p
                    - raast
                  description: Payment method for the link
                description:
                  type: string
                  maxLength: 200
                expires_in:
                  type: integer
                  description: Expiry time in minutes (default 60)
                  default: 60
              required:
                - amount
                - mode
      responses:
        '201':
          description: Payment link generated
          content:
            application/json:
              example:
                link_id: "link-uuid"
                link: "https://geopay.link/pay/abc123xyz"
                amount: 1000.00
                mode: "p2p"
                expires_at: "2025-10-01T11:35:00Z"
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized

  /transactions/link/{link_id}/status:
    get:
      summary: Check payment link status
      tags:
        - PAYMENT & TRANSFER SERVICES
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: link_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Link status
          content:
            application/json:
              example:
                link_id: "link-uuid"
                status: "active"
                amount: 1000.00
                paid: false
                expires_at: "2025-10-01T11:35:00Z"
        '404':
          description: Link not found

  # ==========================================
  # PROVIDERS
  # ==========================================

  /providers:
    get:
      summary: Get supported providers for bill payments
      tags:
        - PROVIDERS
      security: []
      description: Returns all supported utility providers and network operators
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - utility
              - telecom
              - internet
          description: Filter by provider type
      responses:
        '200':
          description: List of providers
          content:
            application/json:
              example:
                providers:
                  - provider_id: "provider-uuid-1"
                    name: "K-Electric"
                    type: "utility"
                    logo_url: "https://cdn.geopay.com/logos/ke.png"
                    service_type: "electricity"
                  - provider_id: "provider-uuid-2"
                    name: "PTCL"
                    type: "telecom"
                    logo_url: "https://cdn.geopay.com/logos/ptcl.png"
                    service_type: "landline"
                  - provider_id: "provider-uuid-3"
                    name: "Jazz"
                    type: "telecom"
                    logo_url: "https://cdn.geopay.com/logos/jazz.png"
                    service_type: "mobile"

  # ==========================================
  # VIRTUAL CARD MANAGEMENT
  # ==========================================

  /cards/issue:
    post:
      summary: Issue virtual card
      tags:
        - VIRTUAL CARD MANAGEMENT
      security:
        - bearerAuth: []
      description: |
        Issues a virtual card linked to the authenticated user's wallet.
        Requires KYC verification to be completed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_type:
                  type: string
                  enum:
                    - VISA
                    - MasterCard
                    - PayPak
                card_name:
                  type: string
                  description: Custom name for the card
                  maxLength: 50
              required:
                - card_type
      responses:
        '201':
          description: Card issued successfully
          content:
            application/json:
              example:
                card_id: "card-uuid"
                card_number: "4532-****-****-1234"
                cardholder_name: "AHMED KHAN"
                expiry_date: "12/28"
                cvv: "***"
                is_active: true
                card_type: "VISA"
                daily_limit: 50000.00
                transaction_limit: 10000.00
                issued_at: "2025-10-01T10:35:00Z"
        '403':
          description: KYC not verified
        '401':
          description: Unauthorized

  /cards:
    get:
      summary: Get all cards for authenticated user
      tags:
        - VIRTUAL CARD MANAGEMENT
      security:
        - bearerAuth: []
      description: Returns all cards owned by the authenticated user
      responses:
        '200':
          description: List of user's cards
          content:
            application/json:
              example:
                cards:
                  - card_id: "card-uuid-1"
                    card_number: "4532-****-****-1234"
                    cardholder_name: "AHMED KHAN"
                    expiry_date: "12/28"
                    is_active: true
                    card_type: "VISA"
                    status: "active"
                    issued_at: "2025-09-15T08:00:00Z"
                  - card_id: "card-uuid-2"
                    card_number: "5425-****-****-5678"
                    cardholder_name: "AHMED KHAN"
                    expiry_date: "06/27"
                    is_active: false
                    card_type: "MasterCard"
                    status: "frozen"
                    issued_at: "2025-08-10T12:00:00Z"
        '401':
          description: Unauthorized

  /cards/{card_id}:
    get:
      summary: Get specific card details
      tags:
        - VIRTUAL CARD MANAGEMENT
      security:
        - bearerAuth: []
      description: Get details of a specific card owned by the authenticated user
      parameters:
        - in: path
          name: card_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Card details
          content:
            application/json:
              example:
                card_id: "card-uuid"
                card_number: "4532-1234-5678-1234"
                cardholder_name: "AHMED KHAN"
                expiry_date: "12/28"
                cvv: "123"
                is_active: true
                card_type: "VISA"
                daily_limit: 50000.00
                transaction_limit: 10000.00
                daily_spent: 5000.00
                status: "active"
        '404':
          description: Card not found
        '403':
          description: Card does not belong to authenticated user
        '401':
          description: Unauthorized

  /cards/{card_id}/freeze:
    patch:
      summary: Freeze or unfreeze card
      tags:
        - VIRTUAL CARD MANAGEMENT
      security:
        - bearerAuth: []
      description: Freeze or unfreeze a card owned by the authenticated user
      parameters:
        - in: path
          name: card_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                freeze:
                  type: boolean
                  description: true to freeze, false to unfreeze
              required:
                - freeze
      responses:
        '200':
          description: Freeze status updated
          content:
            application/json:
              example:
                card_id: "card-uuid"
                is_active: false
                status: "frozen"
                message: "Card frozen successfully."
        '404':
          description: Card not found
        '403':
          description: Card does not belong to authenticated user
        '401':
          description: Unauthorized

  /cards/limits:
    get:
      summary: Get card limits for authenticated user
      tags:
        - VIRTUAL CARD MANAGEMENT
      security:
        - bearerAuth: []
      description: |
        Get current card spending limits enforced by GeoPay.
        Users can only view limits, not modify them.
      responses:
        '200':
          description: Card limits
          content:
            application/json:
              example:
                default_daily_limit: 50000.00
                default_transaction_limit: 10000.00
                daily_spent_today: 5000.00
                remaining_daily_limit: 45000.00
                currency: "PKR"
                reset_time: "2025-10-02T00:00:00Z"
        '401':
          description: Unauthorized

  # ==========================================
  # NOTIFICATIONS
  # ==========================================

  /notifications:
    get:
      summary: Get notifications for authenticated user
      tags:
        - Notifications
      security:
        - bearerAuth: []
      description: |
        Retrieve notifications for the authenticated user.
        This endpoint is for historical/missed notifications.
        Real-time notifications are delivered via Firebase Cloud Messaging (FCM).
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: status
          schema:
            type: string
            enum:
              - read
              - unread
      responses:
        '200':
          description: Notifications list
          content:
            application/json:
              example:
                notifications:
                  - notification_id: "notif-uuid-1"
                    title: "Payment Received"
                    message: "You received PKR 1,000 from Ali Ahmed"
                    type: "transaction"
                    status: "unread"
                    created_at: "2025-10-01T10:30:00Z"
                  - notification_id: "notif-uuid-2"
                    title: "Card Frozen"
                    message: "Your VISA card ending in 1234 has been frozen"
                    type: "security"
                    status: "read"
                    created_at: "2025-09-30T15:20:00Z"
                total: 45
                page: 1
                unread_count: 12
        '401':
          description: Unauthorized

  /notifications/{notification_id}/read:
    patch:
      summary: Mark notification as read
      tags:
        - Notifications
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: notification_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              example:
                notification_id: "notif-uuid"
                status: "read"
        '404':
          description: Notification not found
        '401':
          description: Unauthorized

  /notifications/fcm-token:
    post:
      summary: Register FCM token for push notifications
      tags:
        - Notifications
      security:
        - bearerAuth: []
      description: |
        Register Firebase Cloud Messaging token for receiving real-time push notifications.
        This token is associated with the user's current device.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fcm_token:
                  type: string
                  description: Firebase Cloud Messaging device token
                device_fingerprint:
                  type: string
                  description: Device identifier to associate token with
              required:
                - fcm_token
                - device_fingerprint
      responses:
        '200':
          description: FCM token registered
          content:
            application/json:
              example:
                message: "Push notification token registered successfully."
        '400':
          description: Invalid token or device
        '401':
          description: Unauthorized

  # ==========================================
  # SECURITY
  # ==========================================

  /security/logs:
    get:
      summary: Retrieve security logs for authenticated user
      tags:
        - Security
      security:
        - bearerAuth: []
      description: View security events and activity logs
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: action_type
          schema:
            type: string
            enum:
              - login
              - logout
              - device_register
              - password_change
              - transaction
              - card_action
      responses:
        '200':
          description: Security logs
          content:
            application/json:
              example:
                logs:
                  - log_id: "log-uuid-1"
                    action: "login"
                    timestamp: "2025-10-01T10:30:00Z"
                    device: "iPhone 13"
                    ip_address: "192.168.1.100"
                    location: "Islamabad, Pakistan"
                    status: "success"
                  - log_id: "log-uuid-2"
                    action: "transaction"
                    timestamp: "2025-10-01T10:25:00Z"
                    device: "iPhone 13"
                    details: "P2P transfer of PKR 1,000"
                    status: "success"
                total: 120
                page: 1
        '401':
          description: Unauthorized
