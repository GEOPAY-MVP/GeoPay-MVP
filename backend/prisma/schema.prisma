generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum KYCStatus {
  pending
  verified
  rejected
  under_review
}

enum UserStatus {
  active
  inactive
  suspended
  blocked
}

model User {
  user_id           String     @id @default(uuid())
  full_name         String?
  email             String     @unique
  phone_number      String     @unique
  cnic              String     @unique
  date_of_birth     DateTime?
  address           String?
  password_hash     String
  pin               String
  kyc_status        KYCStatus  @default(pending)
  is_two_fa_enabled Boolean    @default(false)
  two_fa_method     String?
  status            UserStatus @default(active)
  registered_at     DateTime   @default(now())
  last_login_at     DateTime?
  userDevices  UserDevice[]

  @@map("user")
}

enum DeviceStatus {
  active
  inactive
  suspended
  blocked
}

model Device {
  device_id            String   @id @default(uuid())
  os_type              String?
  device_fingerprint   String   @unique
  device_name          String?
  status               DeviceStatus @default(active)
  is_biometric_enabled Boolean  @default(false)
  biometric_public_key String?
  fcm_token            String?
  userDevices  UserDevice[]

  @@map("device")
}

model UserDevice {
  user_device_id String   @id @default(dbgenerated("gen_random_uuid()")) // Changed for DB-side generation
  user_id        String
  device_id      String
  is_active      Boolean  @default(true)
  registered_at  DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) // Changed for DB-side generation
  last_active_at DateTime?
  trusted        Boolean  @default(false)

  // Relations
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  device         Device   @relation(fields: [device_id], references: [device_id], onDelete: Cascade)

  @@unique([user_id, device_id])
  @@map("user_device")
}